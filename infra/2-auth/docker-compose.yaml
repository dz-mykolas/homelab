networks:
  reverse-proxy:
    external: true
    name: reverse-proxy
  auth-internal:
    internal: true

volumes:
  authentik_media:
  authentik_templates:
  authentik_certs:
  pgdata:

services:
  authentik:
    container_name: authentik
    hostname: authentik
    image: ghcr.io/goauthentik/server:latest
    restart: unless-stopped
    command: server

    # CURL is not installed for now, 
    # find a way to install it and 
    # then uncomment the healthcheck
    # healthcheck:
    #     test: ["CMD-SHELL", "curl --fail https://auth.${MY_DOMAIN}/application/o/coder/ || exit 1"]
    #     start_period: 5s
    #     start_interval: 5s
    #     interval: 10s
    #     retries: 10
    #     timeout: 5s

    environment:
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY:? Authentik secret key required}

      AUTHENTIK_REDIS__HOST: redis

      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__PASSWORD: ${AUTHENTIK_POSTGRESQL__PASSWORD:? Authentik database password required}
      AUTHENTIK_POSTGRESQL__USER: authentik
      AUTHENTIK_POSTGRESQL__NAME: authentik

      AUTHENTIK_ERROR_REPORTING__ENABLED: true
    volumes:
      - authentik_media:/media
      - authentik_templates:/templates
    ports:
      - "9000:9000"
      - "9443:9443"
    networks: [reverse-proxy, auth-internal]
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
  authentik-worker:
    container_name: authentik-worker
    hostname: authentik-worker
    image: ghcr.io/goauthentik/server:latest
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY:?Authentik secret key required}
      
      AUTHENTIK_REDIS__HOST: redis

      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__PASSWORD: ${AUTHENTIK_POSTGRESQL__PASSWORD:?Authentik database password required}
      AUTHENTIK_POSTGRESQL__USER: authentik
      AUTHENTIK_POSTGRESQL__NAME: authentik
    user: root
    volumes:
      - authentik_media:/media
      - authentik_templates:/templates
      - authentik_certs:/certs
    networks: [auth-internal]
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--appendonly", "yes"]
    healthcheck:
    test: ["CMD", "redis-cli", "ping"]
    interval: 10s
    timeout: 3s
    retries: 10
    networks: [auth-internal]

  postgresql:
    image: postgres:16-alpine
    environment:
    POSTGRES_DB: authentik
    POSTGRES_USER: authentik
    POSTGRES_PASSWORD: ${AUTHENTIK_POSTGRESQL__PASSWORD}
    healthcheck:
    test: ["CMD-SHELL", "pg_isready -U authentik -d authentik"]
    interval: 10s
    timeout: 5s
    retries: 10
    volumes:
    - pgdata:/var/lib/postgresql/data
    networks: [auth-internal]
    
